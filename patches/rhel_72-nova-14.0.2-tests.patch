diff --git a/nova/tests/unit/api/openstack/fakes.py b/nova/tests/unit/api/openstack/fakes.py
index a3edd52..d3ef3b3 100644
--- a/nova/tests/unit/api/openstack/fakes.py
+++ b/nova/tests/unit/api/openstack/fakes.py
@@ -395,7 +395,7 @@ def stub_instance(id=1, user_id=None, project_id=None, host=None,
                   memory_mb=0, vcpus=0, root_gb=0, ephemeral_gb=0,
                   instance_type=None, launch_index=0, kernel_id="",
                   ramdisk_id="", user_data=None, system_metadata=None,
-                  services=None):
+                  services=None, fpga_device=""):
     if user_id is None:
         user_id = 'fake_user'
     if project_id is None:
@@ -504,7 +504,8 @@ def stub_instance(id=1, user_id=None, project_id=None, host=None,
                   "flavor": flavorinfo,
               },
         "cleaned": cleaned,
-        "services": services}
+        "services": services,
+        "fpga_device": ""}
 
     instance.update(info_cache)
     instance['info_cache']['instance_uuid'] = instance['uuid']
diff --git a/nova/tests/unit/compute/test_claims.py b/nova/tests/unit/compute/test_claims.py
index 6bd25e3..f8974fd 100644
--- a/nova/tests/unit/compute/test_claims.py
+++ b/nova/tests/unit/compute/test_claims.py
@@ -88,12 +88,14 @@ class ClaimTestCase(test.NoDBTestCase):
 
         requests = requests or self.empty_requests
 
+        fpga_ip_id = kwargs.pop('fpga_ip_id', None)
+
         @mock.patch('nova.db.instance_extra_get_by_instance_uuid',
                     return_value=db_numa_topology)
         def get_claim(mock_extra_get):
             return claims.Claim(self.context, instance, self.tracker,
                                 self.resources, requests, overhead=overhead,
-                                limits=limits)
+                                limits=limits, fpga_ip_id=fpga_ip_id)
         return get_claim()
 
     def _fake_instance(self, **kwargs):
@@ -131,6 +133,8 @@ class ClaimTestCase(test.NoDBTestCase):
             'free_disk_gb': 20,
             'vcpus': 2,
             'vcpus_used': 0,
+            'fpga_regions': 0,
+            'fpga_regions_used': 0,
             'numa_topology': objects.NUMATopology(
                 cells=[objects.NUMACell(id=1, cpuset=set([1, 2]), memory=512,
                                         memory_usage=0, cpu_usage=0,
@@ -245,6 +249,27 @@ class ClaimTestCase(test.NoDBTestCase):
             self._claim, requests=requests)
         mock_pci_supports_requests.assert_called_once_with([request])
 
+    def test_fpga_pass(self):
+        limits = {'fpga_regions': 2}
+        self.resources.fpga_regions_used = 0
+        claim = self._claim(limits, fpga_ip_id='accelerator_id')
+        self.assertIsNone(claim._test_fpga(resources=self.resources,
+                                           limit=2))
+
+    def test_fpga_insufficient(self):
+        limits = {'fpga_regions': 2}
+        self.resources.fpga_regions_used = 2
+        self.assertRaises(exception.ComputeResourcesUnavailable,
+                          self._claim, limits=limits,
+                          fpga_ip_id='accelerator_id')
+
+    def test_fpga_pass_when_fpga_not_requested(self):
+        limits = {'fpga_regions': 2}
+        self.resources.fpga_regions_used = 2
+        claim = self._claim(limits, fpga_ip_id=None)
+        self.assertIsNone(claim._test_fpga(resources=self.resources,
+                                           limit=2))
+
     @mock.patch('nova.pci.stats.PciDeviceStats.support_requests')
     def test_pci_pass_no_requests(self, mock_pci_supports_requests):
         self._claim()
@@ -384,6 +409,7 @@ class MoveClaimTestCase(ClaimTestCase):
 
     def _claim(self, limits=None, overhead=None, requests=None,
                image_meta=None, **kwargs):
+        fpga_ip_id = kwargs.pop('fpga_ip_id', None)
         instance_type = self._fake_instance_type(**kwargs)
         numa_topology = kwargs.pop('numa_topology', None)
         image_meta = image_meta or {}
@@ -412,7 +438,7 @@ class MoveClaimTestCase(ClaimTestCase):
             return claims.MoveClaim(self.context, self.instance, instance_type,
                                      image_meta, self.tracker, self.resources,
                                      requests, overhead=overhead,
-                                     limits=limits)
+                                     limits=limits, fpga_ip_id=fpga_ip_id)
         return get_claim()
 
     @mock.patch('nova.objects.Instance.drop_migration_context')
diff --git a/nova/tests/unit/compute/test_compute.py b/nova/tests/unit/compute/test_compute.py
index 601a4f6..5067e06 100644
--- a/nova/tests/unit/compute/test_compute.py
+++ b/nova/tests/unit/compute/test_compute.py
@@ -194,7 +194,9 @@ class BaseTestCase(test.TestCase):
                                    'cpu_allocation_ratio': 16.0,
                                    'ram_allocation_ratio': 1.5,
                                    'disk_allocation_ratio': 1.0,
-                                   'host_ip': '127.0.0.1'}]
+                                   'host_ip': '127.0.0.1',
+                                   'fpga_regions': 0,
+                                   'fpga_regions_used': 0}]
             return [objects.ComputeNode._from_db_object(
                         context, objects.ComputeNode(), cn)
                     for cn in fake_compute_nodes]
diff --git a/nova/tests/unit/compute/test_compute_mgr.py b/nova/tests/unit/compute/test_compute_mgr.py
index 719bda1..5c5229f 100644
--- a/nova/tests/unit/compute/test_compute_mgr.py
+++ b/nova/tests/unit/compute/test_compute_mgr.py
@@ -253,6 +253,46 @@ class ComputeManagerUnitTestCase(test.NoDBTestCase):
             else:
                 self.assertFalse(db_node.destroy.called)
 
+    @mock.patch('nova.compute.manager.ComputeManager.'
+                '_notify_about_instance_usage')
+    @mock.patch('nova.compute.manager.ComputeManager._shutdown_instance')
+    @mock.patch('nova.compute.manager.ComputeManager.'
+                'update_available_resource')
+    @mock.patch('nova.objects.Instance.destroy')
+    @mock.patch('nova.objects.Instance.save')
+    @mock.patch('nova.fpga.erase_fpga')
+    def test_delete_instance_fpga_erased(self, fpga_erase,
+            instance_save, instance_destroy, update_resources,
+            shutdown_instance, inst_usage_notify):
+        quotas = mock.create_autospec(objects.Quotas, spec_set=True)
+        instance = fake_instance.fake_instance_obj(self.context,
+            vm_state=vm_states.ACTIVE,
+            expected_attrs=['system_metadata', 'info_cache', 'fpga_device'])
+
+        instance.fpga_device = "accelerator_id"
+        self.compute._delete_instance(self.context, instance, [], quotas)
+        fpga_erase.assert_called_once_with(instance)
+
+    @mock.patch('nova.compute.manager.ComputeManager.'
+                '_notify_about_instance_usage')
+    @mock.patch('nova.compute.manager.ComputeManager._shutdown_instance')
+    @mock.patch('nova.compute.manager.ComputeManager.'
+                'update_available_resource')
+    @mock.patch('nova.objects.Instance.destroy')
+    @mock.patch('nova.objects.Instance.save')
+    @mock.patch('nova.fpga.erase_fpga')
+    def test_delete_instance_without_fpga_no_erasing(self, fpga_erase,
+            instance_save, instance_destroy, update_resources,
+            shutdown_instance, inst_usage_notify):
+        quotas = mock.create_autospec(objects.Quotas, spec_set=True)
+        instance = fake_instance.fake_instance_obj(self.context,
+            vm_state=vm_states.ACTIVE,
+            expected_attrs=['system_metadata', 'info_cache', 'fpga_device'])
+
+        instance.fpga_device = None
+        self.compute._delete_instance(self.context, instance, [], quotas)
+        self.assertFalse(fpga_erase.called)
+
     @mock.patch('nova.compute.utils.notify_about_instance_action')
     def test_delete_instance_without_info_cache(self, mock_notify):
         instance = fake_instance.fake_instance_obj(
@@ -3306,7 +3346,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
                 self.image, self.injected_files, self.admin_pass,
                 self.requested_networks, self.security_groups,
                 self.block_device_mapping, self.node, self.limits,
-                self.filter_properties)
+                self.filter_properties, request_spec={})
 
     # This test when sending an icehouse compatible rpc call to juno compute
     # node, NetworkRequest object can load from three items tuple.
@@ -3371,7 +3411,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
                 self.image, self.injected_files, self.admin_pass,
                 self.requested_networks, self.security_groups,
                 self.block_device_mapping, self.node, self.limits,
-                self.filter_properties)
+                self.filter_properties, request_spec={})
         mock_clean_net.assert_called_once_with(self.context, self.instance,
                 self.requested_networks)
         mock_clean_vol.assert_called_once_with(self.context,
@@ -3418,7 +3458,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
                 self.image, self.injected_files, self.admin_pass,
                 self.requested_networks, self.security_groups,
                 self.block_device_mapping, self.node, self.limits,
-                self.filter_properties)
+                self.filter_properties, request_spec={})
         mock_clean.assert_called_once_with(self.context, self.instance,
                 self.compute.host)
         mock_nil.assert_called_once_with(self.instance)
@@ -3501,7 +3541,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
             self.image, self.injected_files, self.admin_pass,
             self.requested_networks, self.security_groups,
             self.block_device_mapping, self.node, self.limits,
-            self.filter_properties)
+            self.filter_properties, request_spec={})
         mock_cleanup_network.assert_called_once_with(
             self.context, instance, self.compute.host)
         mock_build_ins.assert_called_once_with(self.context,
@@ -3556,7 +3596,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
             self.image, self.injected_files, self.admin_pass,
             self.requested_networks, self.security_groups,
             self.block_device_mapping, self.node, self.limits,
-            self.filter_properties)
+            self.filter_properties, request_spec={})
         mock_cleanup_network.assert_called_once_with(
             self.context, instance, self.requested_networks)
         mock_build_ins.assert_called_once_with(self.context,
@@ -3600,7 +3640,8 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
         mock_build_run.assert_called_once_with(self.context, self.instance,
                 self.image, self.injected_files, self.admin_pass,
                 self.requested_networks, self.security_groups,
-                self.block_device_mapping, self.node, self.limits, {})
+                self.block_device_mapping, self.node, self.limits, {},
+                                               request_spec={})
         mock_clean_net.assert_called_once_with(self.context, self.instance,
                 self.requested_networks)
         mock_add.assert_called_once_with(self.context, self.instance,
@@ -3649,7 +3690,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
                 self.image, self.injected_files, self.admin_pass,
                 self.requested_networks, self.security_groups,
                 self.block_device_mapping, self.node, self.limits,
-                self.filter_properties)
+                self.filter_properties, request_spec={})
         mock_deallocate.assert_called_once_with(self.instance)
         mock_clean_inst.assert_called_once_with(self.context, self.instance,
                 self.compute.host)
@@ -3697,7 +3738,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
                 self.image, self.injected_files, self.admin_pass,
                 self.requested_networks, self.security_groups,
                 self.block_device_mapping, self.node, self.limits,
-                self.filter_properties)
+                self.filter_properties, request_spec={})
         mock_deallocate.assert_called_once_with(self.instance)
         mock_clean.assert_called_once_with(self.context, self.instance,
                 self.requested_networks)
@@ -3757,7 +3798,7 @@ class ComputeManagerBuildInstanceTestCase(test.NoDBTestCase):
                 self.image, self.injected_files, self.admin_pass,
                 self.requested_networks, self.security_groups,
                 self.block_device_mapping, self.node, self.limits,
-                self.filter_properties)
+                self.filter_properties, request_spec={})
         mock_clean_net.assert_called_once_with(self.context, self.instance,
                 self.requested_networks)
 
diff --git a/nova/tests/unit/compute/test_multiple_nodes.py b/nova/tests/unit/compute/test_multiple_nodes.py
index 2907e94..aae48d6 100644
--- a/nova/tests/unit/compute/test_multiple_nodes.py
+++ b/nova/tests/unit/compute/test_multiple_nodes.py
@@ -100,7 +100,9 @@ class MultiNodeComputeTestCase(BaseTestCase):
                                    'cpu_allocation_ratio': None,
                                    'ram_allocation_ratio': None,
                                    'disk_allocation_ratio': None,
-                                   'host_ip': '127.0.0.1'}]
+                                   'host_ip': '127.0.0.1',
+                                   'fpga_regions': 0,
+                                   'fpga_regions_used': 0}]
             return [objects.ComputeNode._from_db_object(
                         context, objects.ComputeNode(), cn)
                     for cn in fake_compute_nodes]
diff --git a/nova/tests/unit/compute/test_resource_tracker.py b/nova/tests/unit/compute/test_resource_tracker.py
index fcc623e..9caadc9 100644
--- a/nova/tests/unit/compute/test_resource_tracker.py
+++ b/nova/tests/unit/compute/test_resource_tracker.py
@@ -86,6 +86,8 @@ _COMPUTE_NODE_FIXTURES = [
         cpu_allocation_ratio=16.0,
         ram_allocation_ratio=1.5,
         disk_allocation_ratio=1.0,
+        fpga_regions=0,
+        fpga_regions_used=0,
         ),
 ]
 
@@ -1371,6 +1373,51 @@ class TestInstanceClaim(BaseTestCase):
         self.assertTrue(obj_base.obj_equal_prims(expected_updated,
                                                  self.rt.compute_node))
 
+    @mock.patch('nova.utils.execute')
+    def test_update_fpga_resource(self, mock_execute):
+        resource_tracker.CONF.fpga_access = True
+        resource_tracker.CONF.fpga_exec = "fpga_exec"
+        mock_execute.return_value = ('Used regions: 1/2', 0)
+
+        resources = {'fpga_regions': 2, 'fpga_regions_used': 0}
+        self.rt._update_fpga_resource(resources)
+
+        self.assertEqual(resources['fpga_regions'], 2)
+        self.assertEqual(resources['fpga_regions_used'], 1)
+
+        # Cleanup
+        resource_tracker.CONF.fpga_access = False
+
+    @mock.patch('nova.utils.execute')
+    def test_update_fpga_resource_fpga_exec_not_found(self, mock_execute):
+        resource_tracker.CONF.fpga_access = True
+        resource_tracker.CONF.fpga_exec = "fpga_exec"
+        mock_execute.side_effect = OSError('fpga_exec binary not found')
+
+        resources = {'fpga_regions': 0, 'fpga_regions_used': 0}
+        self.rt._update_fpga_resource(resources)
+
+        self.assertEqual(resources['fpga_regions'], 0)
+        self.assertEqual(resources['fpga_regions_used'], 0)
+
+        # Cleanup
+        resource_tracker.CONF.fpga_access = False
+
+    @mock.patch('nova.utils.execute')
+    def test_update_fpga_resource_failed_to_parse_response(self, mock_exec):
+        resource_tracker.CONF.fpga_access = True
+        resource_tracker.CONF.fpga_exec = "fpga_exec"
+        mock_exec.return_value = ('Invalid format of this message', 0)
+
+        resources = {'fpga_regions': 0, 'fpga_regions_used': 0}
+        self.rt._update_fpga_resource(resources)
+
+        self.assertEqual(resources['fpga_regions'], 0)
+        self.assertEqual(resources['fpga_regions_used'], 0)
+
+        # Cleanup
+        resource_tracker.CONF.fpga_access = False
+
     @mock.patch('nova.objects.InstancePCIRequests.get_by_instance_uuid')
     @mock.patch('nova.objects.MigrationList.get_in_progress_by_host_and_node')
     def test_claim(self, migr_mock, pci_mock):
@@ -1609,7 +1656,6 @@ class TestResize(BaseTestCase):
         get_mock.return_value = _INSTANCE_FIXTURES
         migr_mock.return_value = []
         get_cn_mock.return_value = _COMPUTE_NODE_FIXTURES[0]
-
         instance = _INSTANCE_FIXTURES[0].obj_clone()
         instance.new_flavor = _INSTANCE_TYPE_OBJ_FIXTURES[2]
         # This migration context is fine, it points to the first instance
diff --git a/nova/tests/unit/compute/test_shelve.py b/nova/tests/unit/compute/test_shelve.py
index 2dcc81f..4cb3869 100644
--- a/nova/tests/unit/compute/test_shelve.py
+++ b/nova/tests/unit/compute/test_shelve.py
@@ -36,6 +36,8 @@ def _fake_resources():
         'local_gb': 20,
         'local_gb_used': 0,
         'free_disk_gb': 20,
+        'fpga_regions': 0,
+        'fpga_regions_used': 0,
         'vcpus': 2,
         'vcpus_used': 0
     }
diff --git a/nova/tests/unit/db/test_db_api.py b/nova/tests/unit/db/test_db_api.py
index a4483c4..c007e64 100644
--- a/nova/tests/unit/db/test_db_api.py
+++ b/nova/tests/unit/db/test_db_api.py
@@ -7663,7 +7663,8 @@ class ComputeNodeTestCase(test.TestCase, ModelsObjectComparatorMixin):
                                  cpu_allocation_ratio=16.0,
                                  ram_allocation_ratio=1.5,
                                  disk_allocation_ratio=1.0,
-                                 stats='', numa_topology='')
+                                 stats='', numa_topology='',
+                                 fpga_regions=0, fpga_regions_used=0)
         # add some random stats
         self.stats = dict(num_instances=3, num_proj_12345=2,
                      num_proj_23456=2, num_vm_building=3)
@@ -7712,6 +7713,8 @@ class ComputeNodeTestCase(test.TestCase, ModelsObjectComparatorMixin):
                                  cpu_allocation_ratio=16.0,
                                  ram_allocation_ratio=1.5,
                                  disk_allocation_ratio=1.0,
+                                 fpga_regions=0,
+                                 fpga_regions_used=0,
                                  stats='', numa_topology='')
         stats = dict(num_instances=2, num_proj_12345=1,
                      num_proj_23456=1, num_vm_building=2)
@@ -8905,7 +8908,7 @@ class ArchiveTestCase(test.TestCase, ModelsObjectComparatorMixin):
             # NOTE(PaulMurray): migration 333 adds 'console_auth_tokens'
             if table_name in ['tags', 'resource_providers', 'allocations',
                               'inventories', 'resource_provider_aggregates',
-                              'console_auth_tokens']:
+                              'console_auth_tokens', 'fpga_devices']:
                 continue
 
             if table_name.startswith("shadow_"):
diff --git a/nova/tests/unit/db/test_migrations.py b/nova/tests/unit/db/test_migrations.py
index 7c47f4c..6f10063 100644
--- a/nova/tests/unit/db/test_migrations.py
+++ b/nova/tests/unit/db/test_migrations.py
@@ -916,6 +916,23 @@ class NovaMigrationsCheckers(test_migrations.ModelsMigrationsSync,
         self.assertColumnExists(engine, 'shadow_instance_extra',
                                         'device_metadata')
 
+    def _check_335(self, engine, data):
+        self.assertColumnExists(engine, 'compute_nodes', 'fpga_regions')
+        self.assertColumnExists(engine, 'shadow_compute_nodes', 'fpga_regions')
+        self.assertColumnExists(engine, 'compute_nodes', 'fpga_regions_used')
+        self.assertColumnExists(engine, 'shadow_compute_nodes',
+                                'fpga_regions_used')
+
+    def _check_336(self, engine, data):
+        self.assertColumnExists(engine, 'instances', 'fpga_device')
+        self.assertColumnExists(engine, 'shadow_instances', 'fpga_device')
+
+    def _check_337(self, engine, data):
+        self.assertColumnExists(engine, 'fpga_devices', 'instance_uuid')
+        self.assertIndexMembers(engine, 'fpga_devices',
+                                'ix_fpga_devices_instance_uuid',
+                                ['instance_uuid'])
+
 
 class TestNovaMigrationsSQLite(NovaMigrationsCheckers,
                                test_base.DbTestCase,
diff --git a/nova/tests/unit/db/test_sqlalchemy_migration.py b/nova/tests/unit/db/test_sqlalchemy_migration.py
index 9f2af9d..102871d 100644
--- a/nova/tests/unit/db/test_sqlalchemy_migration.py
+++ b/nova/tests/unit/db/test_sqlalchemy_migration.py
@@ -239,29 +239,6 @@ class TestNewtonCheck(test.TestCase):
             '330_enforce_mitaka_online_migrations')
         self.engine = db_api.get_engine()
 
-    def test_all_migrated(self):
-        cn = objects.ComputeNode(context=self.context,
-                                 vcpus=1, memory_mb=512, local_gb=10,
-                                 vcpus_used=0, memory_mb_used=256,
-                                 local_gb_used=5, hypervisor_type='HyperDanVM',
-                                 hypervisor_version='34', cpu_info='foo')
-        cn.create()
-        objects.Aggregate(context=self.context,
-                          name='foo').create()
-        objects.PciDevice.create(self.context, {})
-        self.migration.upgrade(self.engine)
-
-    def test_cn_not_migrated(self):
-        cn = objects.ComputeNode(context=self.context,
-                                 vcpus=1, memory_mb=512, local_gb=10,
-                                 vcpus_used=0, memory_mb_used=256,
-                                 local_gb_used=5, hypervisor_type='HyperDanVM',
-                                 hypervisor_version='34', cpu_info='foo')
-        cn.create()
-        db_api.compute_node_update(self.context, cn.id, {'uuid': None})
-        self.assertRaises(exception.ValidationError,
-                          self.migration.upgrade, self.engine)
-
     def test_aggregate_not_migrated(self):
         agg = db_api.aggregate_create(self.context, {"name": "foobar"})
         db_api.aggregate_update(self.context, agg.id, {'uuid': None})
diff --git a/nova/tests/unit/fpga/__init__.py b/nova/tests/unit/fpga/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/nova/tests/unit/fpga/test_fpga.py b/nova/tests/unit/fpga/test_fpga.py
new file mode 100644
index 0000000..32f35c8
--- /dev/null
+++ b/nova/tests/unit/fpga/test_fpga.py
@@ -0,0 +1,160 @@
+# Copyright 2014 IBM Corp.
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+"""Tests for FPGA basic functions"""
+
+import mock
+from nova import context
+from nova import exception
+from nova import fpga
+from nova import test
+from nova.tests.unit import fake_instance
+from oslo_concurrency.processutils import ProcessExecutionError
+
+
+class FpgaTestCase(test.NoDBTestCase):
+
+    def test_get_ip_image_id_from_flavor(self):
+        request_spec = {'instance_type': {'extra_specs':
+                            {'hw:fpga_ip_id': 'accelerator_ip'}}}
+        self.assertEqual('accelerator_ip', fpga.get_ip_image_id(request_spec))
+
+    def test_get_ip_image_id_from_image_metadata(self):
+        request_spec = {
+            'image': {'properties': {'hw_fpga_ip_id': 'accelerator_ip'}}}
+        self.assertEqual('accelerator_ip', fpga.get_ip_image_id(request_spec))
+
+    def test_get_ip_image_id_image_precedes(self):
+        request_spec = {
+            'image': {'properties': {'hw_fpga_ip_id': 'id_from_image'}},
+            'instance_type': {'extra_specs':
+                            {'hw:fpga_ip_id': 'id_from_flavor'}}}
+        self.assertEqual('id_from_image', fpga.get_ip_image_id(request_spec))
+
+    def test_get_ip_image_id_no_fpga_key_found(self):
+        request_spec = None
+        self.assertIsNone(fpga.get_ip_image_id(request_spec))
+        request_spec = {'instance_type': {'extra_specs': {'key': 'val'}}}
+        self.assertIsNone(fpga.get_ip_image_id(request_spec))
+        request_spec = {'image': {'properties': {'key': 'val'}}}
+        self.assertIsNone(fpga.get_ip_image_id(request_spec))
+
+    @mock.patch('nova.utils.execute')
+    def test_program_ip_simulation_mode_programming_not_called(self,
+            execute_mock):
+        fpga.CONF.fpga_simulation_mode = True
+        fpga.program_ip(None, None)
+        self.assertFalse(execute_mock.called)
+
+    @mock.patch('nova.utils.execute')
+    def test_program_ip_succeeded(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        execute_mock.return_value = ('fpga_image_id', 0)
+
+        fpga.program_ip('fpga_image_id', instance)
+        self.assertEqual(instance.fpga_device, 'fpga_image_id')
+
+    @mock.patch('nova.utils.execute')
+    def test_program_ip_failed(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        execute_mock.return_value = ['fpga_image_id', 'failed']
+
+        self.assertRaises(exception.RescheduledException, fpga.program_ip,
+                          'fpga_image_id', instance)
+        self.assertIsNone(instance.fpga_device)
+
+    @mock.patch('nova.utils.execute',
+                side_effect=ProcessExecutionError("failed"))
+    def test_program_ip_failed_with_processexecutionerror(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        self.assertRaises(exception.RescheduledException, fpga.program_ip,
+                          'fpga_image_id', instance)
+        self.assertIsNone(instance.fpga_device)
+
+    @mock.patch('nova.utils.execute', side_effect=OSError("failed"))
+    def test_program_ip_failed_with_oserror(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        self.assertRaises(exception.RescheduledException, fpga.program_ip,
+                          'fpga_image_id', instance)
+        self.assertIsNone(instance.fpga_device)
+
+    @mock.patch('nova.utils.execute')
+    def test_erase_fpga_succeeded(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        execute_mock.return_value = ('fpga_image_id', 0)
+
+        erase_result = fpga.erase_fpga(instance)
+        self.assertFalse(erase_result[1])
+
+    @mock.patch('nova.utils.execute')
+    def test_erase_fpga_failed(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        execute_mock.return_value = ('fpga_image_id', 'failed')
+
+        erase_result = fpga.erase_fpga(instance)
+        self.assertTrue(erase_result[1])
+
+    @mock.patch('nova.utils.execute', side_effect=OSError("failed"))
+    def test_erase_fpga_failed_with_oserror(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        erase_result = fpga.erase_fpga(instance)
+        self.assertTrue(erase_result[1])
+
+    @mock.patch('nova.utils.execute',
+                side_effect=ProcessExecutionError("failed"))
+    def test_erase_fpga_failed_with_processexecutionerror(self, execute_mock):
+        fpga.CONF.fpga_simulation_mode = False
+
+        req_context = context.RequestContext('fake', 'fake')
+        instance = fake_instance.fake_instance_obj(req_context,
+                expected_attrs=[])
+
+        erase_result = fpga.erase_fpga(instance)
+        self.assertTrue(erase_result[1])
diff --git a/nova/tests/unit/objects/test_compute_node.py b/nova/tests/unit/objects/test_compute_node.py
index ff0459b..b92cf0b 100644
--- a/nova/tests/unit/objects/test_compute_node.py
+++ b/nova/tests/unit/objects/test_compute_node.py
@@ -90,6 +90,8 @@ fake_compute_node = {
     'cpu_allocation_ratio': 16.0,
     'ram_allocation_ratio': 1.5,
     'disk_allocation_ratio': 1.0,
+    'fpga_regions': 0,
+    'fpga_regions_used': 0
     }
 # FIXME(sbauza) : For compatibility checking, to be removed once we are sure
 # that all computes are running latest DB version with host field in it.
diff --git a/nova/tests/unit/objects/test_objects.py b/nova/tests/unit/objects/test_objects.py
index 6bc72d6..a86e942 100644
--- a/nova/tests/unit/objects/test_objects.py
+++ b/nova/tests/unit/objects/test_objects.py
@@ -1109,7 +1109,7 @@ object_data = {
     'BuildRequestList': '1.0-cd95608eccb89fbc702c8b52f38ec738',
     'CellMapping': '1.0-7f1a7e85a22bbb7559fc730ab658b9bd',
     'CellMappingList': '1.0-4ee0d9efdfd681fed822da88376e04d2',
-    'ComputeNode': '1.16-2436e5b836fa0306a3c4e6d9e5ddacec',
+    'ComputeNode': '1.17-0b99b9d63197845ba019e9d34b4315ae',
     'ComputeNodeList': '1.15-4ec4ea3ed297edbd25c33e2aaf797cca',
     'DNSDomain': '1.0-7b0b2dab778454b6a7b6c66afe163a1a',
     'DNSDomainList': '1.0-4ee0d9efdfd681fed822da88376e04d2',
@@ -1132,8 +1132,8 @@ object_data = {
     'HVSpec': '1.2-db672e73304da86139086d003f3977e7',
     'IDEDeviceBus': '1.0-29d4c9f27ac44197f01b6ac1b7e16502',
     'ImageMeta': '1.8-642d1b2eb3e880a367f37d72dd76162d',
-    'ImageMetaProps': '1.15-d45133ec8d2d4a6456338fb0ffd0e5c2',
-    'Instance': '2.3-4f98ab23f4b0a25fabb1040c8f5edecc',
+    'ImageMetaProps': '1.17-a69b05c98ac0f1183b61c50c3a848db6',
+    'Instance': '2.4-0438594b2facc08b6d9b5743aefd95e1',
     'InstanceAction': '1.1-f9f293e526b66fca0d05c3b3a2d13914',
     'InstanceActionEvent': '1.1-e56a64fa4710e43ef7af2ad9d6028b33',
     'InstanceActionEventList': '1.1-13d92fb953030cdbfee56481756e02be',
diff --git a/nova/tests/unit/scheduler/fakes.py b/nova/tests/unit/scheduler/fakes.py
index bbf1761..dbbfa4c 100644
--- a/nova/tests/unit/scheduler/fakes.py
+++ b/nova/tests/unit/scheduler/fakes.py
@@ -82,7 +82,7 @@ COMPUTE_NODES = [
             hypervisor_type='foo', supported_hv_specs=[],
             pci_device_pools=None, cpu_info=None, stats=None, metrics=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0),
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0),
         objects.ComputeNode(
             id=2, local_gb=2048, memory_mb=2048, vcpus=2,
             disk_available_least=1024, free_ram_mb=1024, vcpus_used=2,
@@ -93,7 +93,7 @@ COMPUTE_NODES = [
             hypervisor_type='foo', supported_hv_specs=[],
             pci_device_pools=None, cpu_info=None, stats=None, metrics=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0),
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0),
         objects.ComputeNode(
             id=3, local_gb=4096, memory_mb=4096, vcpus=4,
             disk_available_least=3333, free_ram_mb=3072, vcpus_used=1,
@@ -104,7 +104,7 @@ COMPUTE_NODES = [
             hypervisor_type='foo', supported_hv_specs=[],
             pci_device_pools=None, cpu_info=None, stats=None, metrics=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0),
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0),
         objects.ComputeNode(
             id=4, local_gb=8192, memory_mb=8192, vcpus=8,
             disk_available_least=8192, free_ram_mb=8192, vcpus_used=0,
@@ -115,7 +115,7 @@ COMPUTE_NODES = [
             hypervisor_type='foo', supported_hv_specs=[],
             pci_device_pools=None, cpu_info=None, stats=None, metrics=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0),
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0),
         # Broken entry
         objects.ComputeNode(
             id=5, local_gb=1024, memory_mb=1024, vcpus=1,
diff --git a/nova/tests/unit/scheduler/filters/test_fpga_filter.py b/nova/tests/unit/scheduler/filters/test_fpga_filter.py
new file mode 100644
index 0000000..97e7df1
--- /dev/null
+++ b/nova/tests/unit/scheduler/filters/test_fpga_filter.py
@@ -0,0 +1,62 @@
+# Copyright 2016, OpenStack Foundation
+# All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from nova import objects
+from nova import test
+
+from nova.scheduler.filters import fpga_filter
+from nova.tests.unit.scheduler import fakes
+
+
+class TestFpgaFilter(test.NoDBTestCase):
+
+    def setUp(self):
+        super(TestFpgaFilter, self).setUp()
+        self.filt_cls = fpga_filter.FpgaFilter()
+
+    def test_fpga_filter_passes_image_properties_matched(self):
+        host = self._create_host_state(fpga_regions=2, fpga_regions_used=0)
+        spec = self._create_spec(extra_specs={},
+                                 hw_fpga_ip_id='accelerator_id')
+        self.assertTrue(self.filt_cls.host_passes(host, spec))
+
+    def test_fpga_filter_passes_flavor_specs_matched(self):
+        host = self._create_host_state(fpga_regions=2, fpga_regions_used=0)
+        extra_specs = {'hw:fpga_ip_id': 'accelerator_id'}
+        spec = self._create_spec(extra_specs=extra_specs)
+        self.assertTrue(self.filt_cls.host_passes(host, spec))
+
+    def test_fpga_filter_fails_no_free_fpga_regions(self):
+        host = self._create_host_state(fpga_regions=2, fpga_regions_used=2)
+        extra_specs = {'hw:fpga_ip_id': 'accelerator_id'}
+        spec = self._create_spec(extra_specs=extra_specs)
+        self.assertFalse(self.filt_cls.host_passes(host, spec))
+
+    def test_fpga_filter_passes_no_fpga_property(self):
+        host = self._create_host_state(fpga_regions=2, fpga_regions_used=0)
+        spec = self._create_spec(extra_specs={'some_key': ''},
+                                 hw_video_ram=123)
+        self.assertTrue(self.filt_cls.host_passes(host, spec))
+
+    def _create_spec(self, extra_specs, **image_properties):
+        flavor = objects.Flavor(extra_specs=extra_specs)
+        properties = objects.ImageMetaProps(**image_properties)
+        image = objects.ImageMeta(properties=properties)
+        return objects.RequestSpec(flavor=flavor, image=image)
+
+    def _create_host_state(self, fpga_regions, fpga_regions_used):
+        return fakes.FakeHostState('host1', 'node1',
+                                   {'fpga_regions': fpga_regions,
+                                    'fpga_regions_used': fpga_regions_used})
diff --git a/nova/tests/unit/scheduler/test_host_manager.py b/nova/tests/unit/scheduler/test_host_manager.py
index 312e1ef..fe69f3c 100644
--- a/nova/tests/unit/scheduler/test_host_manager.py
+++ b/nova/tests/unit/scheduler/test_host_manager.py
@@ -967,7 +967,7 @@ class HostStateTestCase(test.NoDBTestCase):
             hypervisor_version=hyper_ver_int, numa_topology=None,
             pci_device_pools=None, metrics=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0)
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0)
 
         host = host_manager.HostState("fakehost", "fakenode")
         host.update(compute=compute)
@@ -1010,7 +1010,7 @@ class HostStateTestCase(test.NoDBTestCase):
             hypervisor_version=hyper_ver_int, numa_topology=None,
             pci_device_pools=None, metrics=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0)
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0)
 
         host = host_manager.HostState("fakehost", "fakenode")
         host.update(compute=compute)
@@ -1043,7 +1043,7 @@ class HostStateTestCase(test.NoDBTestCase):
             hypervisor_version=hyper_ver_int, numa_topology=None,
             pci_device_pools=None, metrics=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0)
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0)
 
         host = host_manager.HostState("fakehost", "fakenode")
         host.update(compute=compute)
@@ -1204,7 +1204,7 @@ class HostStateTestCase(test.NoDBTestCase):
             numa_topology=fakes.NUMA_TOPOLOGY._to_json(),
             stats=None, pci_device_pools=None,
             cpu_allocation_ratio=16.0, ram_allocation_ratio=1.5,
-            disk_allocation_ratio=1.0)
+            disk_allocation_ratio=1.0, fpga_regions=0, fpga_regions_used=0)
         host = host_manager.HostState("fakehost", "fakenode")
         host.update(compute=compute)
 
